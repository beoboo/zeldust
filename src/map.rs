use bevy::prelude::*;
use crate::layer::Layer;

#[derive(Resource)]
pub struct WorldMap {
    pub layers: Vec<Layer>,
}

impl WorldMap {
    pub fn new() -> Self {
        Self {
            layers: Vec::new(),
        }
    }

    pub fn load_layer(self, path: &str) -> Self {
        let layer = Layer::load(path);

        let mut layers = self.layers;
        layers.push(layer);

        Self {
            layers
        }
    }
}

impl Default for WorldMap {
    fn default() -> Self {
        let data = vec![
            vec![20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
            vec![20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 20, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, -1, 20, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, 20, 20, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, -1, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20],
            vec![20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
        ];

        let layer = Layer {
            data
        };

        Self {
            layers: vec![
                layer
            ]
        }
    }
}